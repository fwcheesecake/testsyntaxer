
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class test extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public test() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public test(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public test(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\274\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\004\004\000\002\004\006\000\002\004\007\000" +
    "\002\004\007\000\002\004\010\000\002\005\005\000\002" +
    "\005\007\000\002\005\006\000\002\005\010\000\002\005" +
    "\006\000\002\005\010\000\002\005\007\000\002\005\011" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\005\000\002\007\005\000\002\010" +
    "\003\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\005\000\002\012\006\000\002\012\007\000" +
    "\002\012\007\000\002\012\007\000\002\012\010\000\002" +
    "\012\007\000\002\013\005\000\002\013\007\000\002\014" +
    "\005\000\002\014\006\000\002\014\007\000\002\014\010" +
    "\000\002\015\005\000\002\016\003\000\002\016\005\000" +
    "\002\016\003\000\002\016\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\003\000\002\020\004\000\002\020\005\000" +
    "\002\021\005\000\002\022\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\007\000\002\022" +
    "\007\000\002\023\003\000\002\024\003\000\002\024\005" +
    "\000\002\025\004\000\002\025\003\000\002\026\004\000" +
    "\002\026\003\000\002\027\005\000\002\030\003\000\002" +
    "\030\005\000\002\030\005\000\002\030\007\000\002\031" +
    "\003\000\002\031\005\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\004\000\002\034\004" +
    "\000\002\034\007\000\002\035\003\000\002\035\003\000" +
    "\002\036\003\000\002\036\005\000\002\037\005\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\005\000\002\042\003\000\002\042\005\000\002\043\005" +
    "\000\002\044\003\000\002\044\004\000\002\044\004\000" +
    "\002\044\003\000\002\174\003\000\002\174\004\000\002" +
    "\174\002\000\002\045\003\000\002\045\005\000\002\045" +
    "\004\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\046\005\000\002\051\004\000\002\051\003\000" +
    "\002\051\005\000\002\051\005\000\002\051\007\000\002" +
    "\051\007\000\002\175\004\000\002\175\005\000\002\175" +
    "\002\000\002\052\004\000\002\052\004\000\002\052\006" +
    "\000\002\052\006\000\002\053\004\000\002\053\005\000" +
    "\002\054\004\000\002\055\005\000\002\055\005\000\002" +
    "\055\004\000\002\056\005\000\002\057\003\000\002\057" +
    "\004\000\002\060\003\000\002\060\005\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\061\005\000" +
    "\002\062\004\000\002\062\004\000\002\063\003\000\002" +
    "\063\005\000\002\064\005\000\002\065\004\000\002\066" +
    "\005\000\002\066\007\000\002\067\004\000\002\067\005" +
    "\000\002\070\006\000\002\070\006\000\002\071\005\000" +
    "\002\071\004\000\002\072\005\000\002\073\003\000\002" +
    "\073\003\000\002\176\003\000\002\176\004\000\002\176" +
    "\002\000\002\074\003\000\002\074\005\000\002\074\004" +
    "\000\002\075\004\000\002\076\003\000\002\076\005\000" +
    "\002\077\004\000\002\100\003\000\002\100\005\000\002" +
    "\101\003\000\002\101\003\000\002\177\003\000\002\177" +
    "\004\000\002\102\004\000\002\102\005\000\002\102\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\006\000\004\061\004\001\002\000\006\002\001\005" +
    "\001\001\002\000\006\002\007\005\006\001\002\000\004" +
    "\061\010\001\002\000\004\002\000\001\002\000\006\002" +
    "\uffff\005\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\006\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$test$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$test$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$test$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$test$actions {
  private final test parser;

  /** Constructor */
  CUP$test$actions(test parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$test$do_action_part00000000(
    int                        CUP$test$act_num,
    java_cup.runtime.lr_parser CUP$test$parser,
    java.util.Stack            CUP$test$stack,
    int                        CUP$test$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$test$result;

      /* select the action based on the action number */
      switch (CUP$test$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // QualifiedIdentifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("QualifiedIdentifier",0, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= QualifiedIdentifier EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$test$stack.elementAt(CUP$test$top-1)).value;
		RESULT = start_val;
              CUP$test$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$test$parser.done_parsing();
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // QualifiedIdentifier ::= QualifiedIdentifier POINT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("QualifiedIdentifier",0, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // QualifiedIdentifierList ::= QualifiedIdentifier 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("QualifiedIdentifierList",1, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // QualifiedIdentifierList ::= QualifiedIdentifierList COMMA QualifiedIdentifier 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("QualifiedIdentifierList",1, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CompilationUnit ::= TypeDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("CompilationUnit",2, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CompilationUnit ::= ImportDeclaration TypeDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("CompilationUnit",2, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CompilationUnit ::= PACKAGE QualifiedIdentifier SEMICOLON TypeDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("CompilationUnit",2, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CompilationUnit ::= PACKAGE QualifiedIdentifier SEMICOLON ImportDeclaration TypeDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("CompilationUnit",2, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CompilationUnit ::= Annotations PACKAGE QualifiedIdentifier SEMICOLON TypeDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("CompilationUnit",2, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CompilationUnit ::= Annotations PACKAGE QualifiedIdentifier SEMICOLON ImportDeclaration TypeDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("CompilationUnit",2, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-5)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ImportDeclaration ::= IMPORT QualifiedIdentifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ImportDeclaration",3, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ImportDeclaration ::= IMPORT QualifiedIdentifier POINT TIMES SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ImportDeclaration",3, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ImportDeclaration ::= IMPORT STATIC QualifiedIdentifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ImportDeclaration",3, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ImportDeclaration ::= IMPORT STATIC QualifiedIdentifier POINT TIMES SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ImportDeclaration",3, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-5)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ImportDeclaration ::= IMPORT QualifiedIdentifier SEMICOLON ImportDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ImportDeclaration",3, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ImportDeclaration ::= IMPORT QualifiedIdentifier POINT TIMES SEMICOLON ImportDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ImportDeclaration",3, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-5)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ImportDeclaration ::= IMPORT STATIC QualifiedIdentifier SEMICOLON ImportDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ImportDeclaration",3, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ImportDeclaration ::= IMPORT STATIC QualifiedIdentifier POINT TIMES SEMICOLON ImportDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ImportDeclaration",3, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-6)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDeclaration ::= ClassOrInterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",4, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ClassOrInterfaceDeclaration ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassOrInterfaceDeclaration",5, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassOrInterfaceDeclaration ::= InterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassOrInterfaceDeclaration",5, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ClassOrInterfaceDeclaration ::= Modifier ClassDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassOrInterfaceDeclaration",5, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassOrInterfaceDeclaration ::= Modifier InterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassOrInterfaceDeclaration",5, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassOrInterfaceDeclaration ::= ClassDeclaration ClassOrInterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassOrInterfaceDeclaration",5, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassOrInterfaceDeclaration ::= InterfaceDeclaration ClassOrInterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassOrInterfaceDeclaration",5, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassOrInterfaceDeclaration ::= Modifier ClassDeclaration ClassOrInterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassOrInterfaceDeclaration",5, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassOrInterfaceDeclaration ::= Modifier InterfaceDeclaration ClassOrInterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassOrInterfaceDeclaration",5, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDeclaration ::= NormalClassDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",6, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDeclaration ::= EnumDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",6, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InterfaceDeclaration ::= NormalInterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceDeclaration",7, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InterfaceDeclaration ::= AnnotationTypeDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceDeclaration",7, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NormalClassDeclaration ::= CLASS IDENTIFIER ClassBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalClassDeclaration",8, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NormalClassDeclaration ::= CLASS IDENTIFIER TypeParameters ClassBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalClassDeclaration",8, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NormalClassDeclaration ::= CLASS IDENTIFIER EXTENDS Type ClassBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalClassDeclaration",8, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NormalClassDeclaration ::= CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalClassDeclaration",8, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NormalClassDeclaration ::= CLASS IDENTIFIER TypeParameters EXTENDS ClassBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalClassDeclaration",8, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NormalClassDeclaration ::= CLASS IDENTIFIER TypeParameters EXTENDS IMPLEMENTS ClassBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalClassDeclaration",8, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-5)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NormalClassDeclaration ::= CLASS IDENTIFIER EXTENDS IMPLEMENTS ClassBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalClassDeclaration",8, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EnumDeclaration ::= ENUM IDENTIFIER EnumBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("EnumDeclaration",9, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EnumDeclaration ::= ENUM IDENTIFIER IMPLEMENTS TypeList EnumBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("EnumDeclaration",9, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NormalInterfaceDeclaration ::= INTERFACE IDENTIFIER InterfaceBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalInterfaceDeclaration",10, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NormalInterfaceDeclaration ::= INTERFACE IDENTIFIER TypeParameters InterfaceBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalInterfaceDeclaration",10, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NormalInterfaceDeclaration ::= INTERFACE IDENTIFIER EXTENDS TypeList InterfaceBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalInterfaceDeclaration",10, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NormalInterfaceDeclaration ::= INTERFACE IDENTIFIER TypeParameters EXTENDS TypeList InterfaceBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NormalInterfaceDeclaration",10, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-5)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AnnotationTypeDeclaration ::= AT IDENTIFIER AnnotationTypeBody 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("AnnotationTypeDeclaration",11, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Type ::= BasicType 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Type ::= BasicType LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Type ::= ReferenceType 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Type ::= ReferenceType LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BasicType ::= BYTE 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("BasicType",13, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BasicType ::= SHORT 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("BasicType",13, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BasicType ::= CHAR 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("BasicType",13, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BasicType ::= INT 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("BasicType",13, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BasicType ::= LONG 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("BasicType",13, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BasicType ::= FLOAT 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("BasicType",13, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BasicType ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("BasicType",13, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BasicType ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("BasicType",13, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ReferenceType ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ReferenceType",14, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ReferenceType ::= IDENTIFIER TypeArguments 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ReferenceType",14, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ReferenceType ::= IDENTIFIER POINT ReferenceType 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ReferenceType",14, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TypeArguments ::= SMALLER TypeArgument GREATER 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeArguments",15, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TypeArgument ::= ReferenceType 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeArgument",16, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TypeArgument ::= INTERROGATION EXTENDS ReferenceType 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeArgument",16, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TypeArgument ::= INTERROGATION SUPER ReferenceType 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeArgument",16, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TypeArgument ::= ReferenceType COMMA TypeArgument 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeArgument",16, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TypeArgument ::= INTERROGATION EXTENDS ReferenceType COMMA TypeArgument 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeArgument",16, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TypeArgument ::= INTERROGATION SUPER ReferenceType COMMA TypeArgument 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeArgument",16, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NonWildcardTypeArguments ::= TypeList 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NonWildcardTypeArguments",17, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TypeList ::= ReferenceType 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeList",18, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TypeList ::= ReferenceType COMMA TypeList 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeList",18, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TypeArgumentsOrDiamond ::= GREATER SMALLER 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeArgumentsOrDiamond",19, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TypeArgumentsOrDiamond ::= TypeArguments 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeArgumentsOrDiamond",19, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NonWildcardTypeArgumentsOrDiamond ::= GREATER SMALLER 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NonWildcardTypeArgumentsOrDiamond",20, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NonWildcardTypeArgumentsOrDiamond ::= NonWildcardTypeArguments 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("NonWildcardTypeArgumentsOrDiamond",20, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TypeParameters ::= GREATER TypeParameter SMALLER 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeParameters",21, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TypeParameter ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeParameter",22, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TypeParameter ::= IDENTIFIER EXTENDS Bound 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeParameter",22, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TypeParameter ::= IDENTIFIER COMMA TypeParameter 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeParameter",22, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TypeParameter ::= IDENTIFIER EXTENDS Bound COMMA TypeParameter 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("TypeParameter",22, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Bound ::= ReferenceType 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Bound",23, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Bound ::= ReferenceType AMPERSAND Bound 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Bound",23, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Modifier ::= Annotation 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Modifier ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Modifier ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Modifier ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Modifier ::= STATIC 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Modifier ::= ABSTRACT 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Modifier ::= FINAL 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Modifier ::= NATIVE 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Modifier ::= SYNCHRONIZED 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Modifier ::= TRANSIENT 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Modifier ::= VOLATILE 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Modifier ::= STRICTFP 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifier",24, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Annotations ::= Annotation 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Annotations",25, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Annotations ::= Annotations Annotation 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Annotations",25, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Annotation ::= AT QualifiedIdentifier 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Annotation",26, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Annotation ::= AT QualifiedIdentifier LEFT AnnotationElement RIGHT 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Annotation",26, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AnnotationElement ::= ElementValuePairs 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("AnnotationElement",27, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AnnotationElement ::= ElementValue 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("AnnotationElement",27, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ElementValuePairs ::= ElementValuePair 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ElementValuePairs",28, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ElementValuePairs ::= ElementValuePair COMMA ElementValuePairs 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ElementValuePairs",28, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ElementValuePair ::= IDENTIFIER ASSIGNMENT ElementValue 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ElementValuePair",29, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ElementValue ::= Annotation 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ElementValue",30, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ElementValue ::= Expression1 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ElementValue",30, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ElementValue ::= ElementValueArrayInitializer 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ElementValue",30, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ElementValueArrayInitializer ::= LEFTCURLY ElementValues RIGHTCURLY 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ElementValueArrayInitializer",31, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ElementValues ::= ElementValue 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ElementValues",32, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ElementValues ::= ElementValue COMMA ElementValues 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ElementValues",32, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ClassBody ::= LEFTCURLY ClassBodyDeclaration RIGHTCURLY 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassBody",33, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ClassBodyDeclaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassBodyDeclaration",34, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ClassBodyDeclaration ::= Modifiers MemberDecl 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassBodyDeclaration",34, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ClassBodyDeclaration ::= STATIC Block 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassBodyDeclaration",34, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ClassBodyDeclaration ::= Block 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ClassBodyDeclaration",34, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Modifiers ::= Modifier 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifiers",122, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Modifiers ::= Modifier Modifiers 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifiers",122, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Modifiers ::= 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Modifiers",122, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MemberDecl ::= MethodOrFieldDecl 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MemberDecl",35, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MemberDecl ::= VOID IDENTIFIER VoidMethodDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MemberDecl",35, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MemberDecl ::= IDENTIFIER ConstructorDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MemberDecl",35, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MemberDecl ::= GenericMethodOrConstructorDecl 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MemberDecl",35, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MemberDecl ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MemberDecl",35, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MemberDecl ::= InterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MemberDecl",35, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MethodOrFieldDecl ::= Type IDENTIFIER MethodOrFieldRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MethodOrFieldDecl",36, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MethodDeclaratorRest ::= FieldDeclaratorsRest SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MethodDeclaratorRest",39, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MethodDeclaratorRest ::= MethodDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MethodDeclaratorRest",39, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MethodDeclaratorRest ::= FormalParameters Brackets Block 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MethodDeclaratorRest",39, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MethodDeclaratorRest ::= FormalParameters Brackets SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MethodDeclaratorRest",39, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MethodDeclaratorRest ::= FormalParameters Brackets THROWS QualifiedIdentifierList Block 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MethodDeclaratorRest",39, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // MethodDeclaratorRest ::= FormalParameters Brackets THROWS QualifiedIdentifierList SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("MethodDeclaratorRest",39, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Brackets ::= LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Brackets",123, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Brackets ::= Brackets LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Brackets",123, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Brackets ::= 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("Brackets",123, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VoidMethodDeclaratorRest ::= FormalParameters Block 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VoidMethodDeclaratorRest",40, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VoidMethodDeclaratorRest ::= FormalParameters SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VoidMethodDeclaratorRest",40, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VoidMethodDeclaratorRest ::= FormalParameters THROWS QualifiedIdentifierList Block 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VoidMethodDeclaratorRest",40, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VoidMethodDeclaratorRest ::= FormalParameters THROWS QualifiedIdentifierList SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VoidMethodDeclaratorRest",40, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ConstructorDeclaratorRest ::= FormalParameters Block 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaratorRest",41, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ConstructorDeclaratorRest ::= FormalParameters THROWS Block 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaratorRest",41, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // GenericMethodOrConstructorDecl ::= TypeParameters GenericMethodOrConstructorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("GenericMethodOrConstructorDecl",42, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // GenericMethodOrConstructorRest ::= Type IDENTIFIER MethodDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("GenericMethodOrConstructorRest",43, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // GenericMethodOrConstructorRest ::= VOID IDENTIFIER MethodDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("GenericMethodOrConstructorRest",43, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // GenericMethodOrConstructorRest ::= IDENTIFIER ConstructorDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("GenericMethodOrConstructorRest",43, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // InterfaceBody ::= LEFTCURLY InterfaceBodyDeclaration RIGHTCURLY 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceBody",44, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // InterfaceBodyDeclaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceBodyDeclaration",45, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // InterfaceBodyDeclaration ::= Modifiers InterfaceMemberDecl 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceBodyDeclaration",45, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // InterfaceMemberDecl ::= InterfaceMethodOrFieldDecl 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMemberDecl",46, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // InterfaceMemberDecl ::= VOID IDENTIFIER VoidInterfaceMethodDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMemberDecl",46, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // InterfaceMemberDecl ::= InterfaceGenericMethodDecl 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMemberDecl",46, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // InterfaceMemberDecl ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMemberDecl",46, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // InterfaceMemberDecl ::= InterfaceDeclaration 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMemberDecl",46, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // InterfaceMethodOrFieldDecl ::= Type IDENTIFIER InterfaceMethodOrFieldRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMethodOrFieldDecl",47, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // InterfaceMethodOrFieldRest ::= ConstantDeclaratorsRest SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMethodOrFieldRest",48, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // InterfaceMethodOrFieldRest ::= InterfaceMethodDeclaratorRest SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMethodOrFieldRest",48, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ConstantDeclaratorsRest ::= ConstantDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ConstantDeclaratorsRest",49, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ConstantDeclaratorsRest ::= ConstantDeclaratorRest COMMA ConstantDeclarator 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ConstantDeclaratorsRest",49, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ConstantDeclaratorRest ::= Brackets ASSIGNMENT VariableInitializer 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ConstantDeclaratorRest",50, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ConstantDeclarator ::= IDENTIFIER ConstantDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ConstantDeclarator",51, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // InterfaceMethodDeclaratorRest ::= FormalParameters Brackets SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMethodDeclaratorRest",52, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // InterfaceMethodDeclaratorRest ::= FormalParameters Brackets THROWS QualifiedIdentifierList SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceMethodDeclaratorRest",52, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-4)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // VoidInterfaceMethodDeclaratorRest ::= FormalParameters SEMICOLON 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VoidInterfaceMethodDeclaratorRest",53, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // VoidInterfaceMethodDeclaratorRest ::= FormalParameters THROWS QualifiedIdentifierList 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VoidInterfaceMethodDeclaratorRest",53, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // InterfaceGenericMethodDecl ::= TypeParameters Type IDENTIFIER InterfaceMethodDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceGenericMethodDecl",54, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // InterfaceGenericMethodDecl ::= TypeParameters VOID IDENTIFIER InterfaceMethodDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("InterfaceGenericMethodDecl",54, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FormalParameters ::= LEFT FormalParameterDecls RIGHT 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("FormalParameters",55, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FormalParameters ::= LEFT RIGHT 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("FormalParameters",55, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // FormalParameterDecls ::= VariableModifiers Type FormalParameterDeclsRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("FormalParameterDecls",56, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VariableModifier ::= FINAL 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableModifier",57, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VariableModifier ::= Annotation 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableModifier",57, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VariableModifiers ::= VariableModifier 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableModifiers",124, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VariableModifiers ::= VariableModifiers VariableModifier 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableModifiers",124, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VariableModifiers ::= 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableModifiers",124, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // FormalParameterDeclsRest ::= VariableDeclaratorId 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("FormalParameterDeclsRest",58, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FormalParameterDeclsRest ::= VariableDeclaratorId COMMA FormalParameterDecls 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("FormalParameterDeclsRest",58, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FormalParameterDeclsRest ::= TRIPLEPOINT VariableDeclaratorId 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("FormalParameterDeclsRest",58, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // VariableDeclaratorId ::= IDENTIFIER Brackets 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableDeclaratorId",59, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // VariableDeclarators ::= VariableDeclarator 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableDeclarators",60, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableDeclarators",60, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // VariableDeclarator ::= IDENTIFIER VariableDeclaratorRest 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableDeclarator",61, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // VariableDeclaratorRest ::= Brackets 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableDeclaratorRest",62, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // VariableDeclaratorRest ::= Brackets ASSIGNMENT VariableInitializer 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableDeclaratorRest",62, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // VariableInitializer ::= ArrayInitializer 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableInitializer",63, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // VariableInitializer ::= Expression 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableInitializer",63, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // VariableInitializers ::= VariableInitializer 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableInitializers",125, ((java_cup.runtime.Symbol)CUP$test$stack.peek()), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // VariableInitializers ::= VariableInitializers VariableInitializer 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("VariableInitializers",125, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ArrayInitializer ::= LEFTCURLY RIGHTCURLY 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ArrayInitializer",64, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-1)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ArrayInitializer ::= LEFTCURLY VariableInitializers RIGHTCURLY 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ArrayInitializer",64, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-2)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ArrayInitializer ::= LEFTCURLY VariableInitializers COMMA RIGHTCURLY 
            {
              Object RESULT =null;

              CUP$test$result = parser.getSymbolFactory().newSymbol("ArrayInitializer",64, ((java_cup.runtime.Symbol)CUP$test$stack.elementAt(CUP$test$top-3)), ((java_cup.runtime.Symbol)CUP$test$stack.peek()), RESULT);
            }
          return CUP$test$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$test$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$test$do_action(
    int                        CUP$test$act_num,
    java_cup.runtime.lr_parser CUP$test$parser,
    java.util.Stack            CUP$test$stack,
    int                        CUP$test$top)
    throws java.lang.Exception
    {
              return CUP$test$do_action_part00000000(
                               CUP$test$act_num,
                               CUP$test$parser,
                               CUP$test$stack,
                               CUP$test$top);
    }
}

}
