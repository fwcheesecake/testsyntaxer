package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal SEMICOLON, POINT, TRIPLEPOINT, COMMA, TIMES, AT, LEFT, RIGHT, LEFTBRACKET, RIGHTBRACKET, INTERROGATION, AMPERSAND, BYTE, SHORT, CHAR, INT, LONG, FLOAT, DOUBLE, BOOLEAN, SMALLER, GREATER, PACKAGE, STATIC, IMPORT, CLASS, EXTENDS, IMPLEMENTS, ENUM, INTERFACE, SUPER, PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, NATIVE, SYNCHRONIZED, TRANSIENT, VOLATILE, STRICTFP, ASSIGNMENT, LEFTCURLY, RIGHTCURLY, VOID, IDENTIFIER, THROW, THROWS;

non terminal QualifiedIdentifier, QualifiedIdentifierList, CompilationUnit, ImportDeclaration, TypeDeclaration, ClassOrInterfaceDeclaration, ClassDeclaration, InterfaceDeclaration, NormalClassDeclaration, EnumDeclaration, NormalInterfaceDeclaration, AnnotationTypeDeclaration, Type, BasicType, ReferenceType, TypeArguments, TypeArgument, NonWildcardTypeArguments, TypeList, TypeArgumentsOrDiamond, NonWildcardTypeArgumentsOrDiamond, TypeParameters, TypeParameter, Bound, Modifier, Annotations, Annotation, AnnotationElement, ElementValuePairs, ElementValuePair, ElementValue, ElementValueArrayInitializer, ElementValues, ClassBody, ClassBodyDeclaration, MemberDecl, MethodOrFieldDecl, MethodOrFieldRest, FieldDeclaratorsRest, MethodDeclaratorRest, VoidMethodDeclaratorRest, ConstructorDeclaratorRest, GenericMethodOrConstructorDecl, GenericMethodOrConstructorRest, InterfaceBody, InterfaceBodyDeclaration, InterfaceMemberDecl, InterfaceMethodOrFieldDecl, InterfaceMethodOrFieldRest, ConstantDeclaratorsRest, ConstantDeclaratorRest, ConstantDeclarator, InterfaceMethodDeclaratorRest, VoidInterfaceMethodDeclaratorRest, InterfaceGenericMethodDecl, FormalParameters, FormalParameterDecls, VariableModifier, FormalParameterDeclsRest, VariableDeclaratorId, VariableDeclarators, VariableDeclarator, VariableDeclaratorRest, VariableInitializer, ArrayInitializer, Block, BlockStatements, BlockStatement, LocalVariableDeclarationStatement, Statement, StatementExpression, Catches, CatchClause, CatchType, Finally, ResourceSpecification, Resources, Resource, SwitchBlockStatementGroups, SwitchBlockStatementGroup, SwitchLabels, SwitchLabel, EnumConstantName, ForControl, ForVarControl, ForVarControlRest, ForVariableDeclaratorsRest, ForInit, ForUpdate, Expression, AssignmentOperator, Expression1, Expression1Rest, Expression2, InfixOp, Expression3, PrefixOp, PostfixOp, Primary, Literal, ParExpression, Arguments, SuperSuffix, ExplicitGenericInvocationSuffix, Creator, CreatedName, ClassCreatorRest, ArrayCreatorRest, IdentifierSuffix, ExplicitGenericInvocation, InnerCreator, Selector, EnumBody, EnumConstants, EnumConstant, EnumBodyDeclarations, AnnotationTypeBody, AnnotationTypeElementDeclarations, AnnotationTypeElementDeclaration, AnnotationTypeElementRest, AnnotationMethodOrConstantRest, AnnotationMethodRest;
non terminal Modifiers, Brackets, VariableModifiers, VariableInitializers;

QualifiedIdentifier ::= IDENTIFIER
    | QualifiedIdentifier POINT IDENTIFIER
;
QualifiedIdentifierList ::= QualifiedIdentifier
    | QualifiedIdentifierList COMMA QualifiedIdentifier
;

CompilationUnit ::= TypeDeclaration
    | ImportDeclaration TypeDeclaration
    | PACKAGE QualifiedIdentifier SEMICOLON TypeDeclaration
    | PACKAGE QualifiedIdentifier SEMICOLON ImportDeclaration TypeDeclaration
    | Annotations PACKAGE QualifiedIdentifier SEMICOLON TypeDeclaration
    | Annotations PACKAGE QualifiedIdentifier SEMICOLON ImportDeclaration TypeDeclaration
;
ImportDeclaration ::= IMPORT QualifiedIdentifier SEMICOLON
    | IMPORT QualifiedIdentifier POINT TIMES SEMICOLON
    | IMPORT STATIC QualifiedIdentifier SEMICOLON
    | IMPORT STATIC QualifiedIdentifier POINT TIMES SEMICOLON

    | IMPORT QualifiedIdentifier SEMICOLON ImportDeclaration
    | IMPORT QualifiedIdentifier POINT TIMES SEMICOLON ImportDeclaration
    | IMPORT STATIC QualifiedIdentifier SEMICOLON ImportDeclaration
    | IMPORT STATIC QualifiedIdentifier POINT TIMES SEMICOLON ImportDeclaration
;
TypeDeclaration ::= ClassOrInterfaceDeclaration;
ClassOrInterfaceDeclaration ::= ClassDeclaration
    | InterfaceDeclaration
    | Modifier ClassDeclaration
    | Modifier InterfaceDeclaration
    | ClassDeclaration ClassOrInterfaceDeclaration
    | InterfaceDeclaration ClassOrInterfaceDeclaration
    | Modifier ClassDeclaration ClassOrInterfaceDeclaration
    | Modifier InterfaceDeclaration ClassOrInterfaceDeclaration
;
ClassDeclaration ::= NormalClassDeclaration
    | EnumDeclaration
;
InterfaceDeclaration ::= NormalInterfaceDeclaration
    | AnnotationTypeDeclaration
;
NormalClassDeclaration ::= CLASS IDENTIFIER ClassBody
    | CLASS IDENTIFIER TypeParameters ClassBody
    | CLASS IDENTIFIER EXTENDS Type ClassBody
    | CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody

    | CLASS IDENTIFIER TypeParameters EXTENDS  ClassBody
    | CLASS IDENTIFIER TypeParameters EXTENDS IMPLEMENTS  ClassBody

    | CLASS IDENTIFIER EXTENDS IMPLEMENTS ClassBody
;
EnumDeclaration ::= ENUM IDENTIFIER EnumBody
    | ENUM IDENTIFIER IMPLEMENTS TypeList EnumBody
;
NormalInterfaceDeclaration ::= INTERFACE IDENTIFIER InterfaceBody
    | INTERFACE IDENTIFIER TypeParameters InterfaceBody
    | INTERFACE IDENTIFIER EXTENDS TypeList InterfaceBody
    | INTERFACE IDENTIFIER TypeParameters EXTENDS TypeList InterfaceBody
;
AnnotationTypeDeclaration ::= AT IDENTIFIER AnnotationTypeBody;

Type ::= BasicType
    | BasicType LEFTBRACKET RIGHTBRACKET
    | ReferenceType
    | ReferenceType LEFTBRACKET RIGHTBRACKET
;
BasicType ::= BYTE
    | SHORT
    | CHAR
    | INT
    | LONG
    | FLOAT
    | DOUBLE
    | BOOLEAN
;
ReferenceType ::= IDENTIFIER
    | IDENTIFIER TypeArguments
    | IDENTIFIER POINT ReferenceType
;
TypeArguments ::= SMALLER TypeArgument GREATER;
TypeArgument ::= ReferenceType
    | INTERROGATION EXTENDS ReferenceType
    | INTERROGATION SUPER ReferenceType

    | ReferenceType COMMA TypeArgument
    | INTERROGATION EXTENDS ReferenceType COMMA TypeArgument
    | INTERROGATION SUPER ReferenceType COMMA TypeArgument
;
NonWildcardTypeArguments ::= TypeList;
TypeList ::= ReferenceType
    | ReferenceType COMMA TypeList
;
TypeArgumentsOrDiamond ::=  GREATER SMALLER
    | TypeArguments
;
NonWildcardTypeArgumentsOrDiamond ::= GREATER SMALLER
    | NonWildcardTypeArguments
;
TypeParameters ::= GREATER TypeParameter SMALLER;
TypeParameter ::= IDENTIFIER
    | IDENTIFIER EXTENDS Bound
    | IDENTIFIER COMMA TypeParameter
    | IDENTIFIER EXTENDS Bound COMMA TypeParameter
;
Bound ::= ReferenceType
    | ReferenceType AMPERSAND Bound
;

Modifier ::= Annotation
    | PUBLIC
    | PROTECTED
    | PRIVATE
    | STATIC
    | ABSTRACT
    | FINAL
    | NATIVE
    | SYNCHRONIZED
    | TRANSIENT
    | VOLATILE
    | STRICTFP
;

Annotations ::= Annotation
    | Annotations Annotation
;

Annotation ::= AT QualifiedIdentifier
    | AT QualifiedIdentifier LEFT AnnotationElement RIGHT
;
AnnotationElement ::= ElementValuePairs
    | ElementValue
;
ElementValuePairs ::= ElementValuePair
    | ElementValuePair COMMA ElementValuePairs
;
ElementValuePair ::= IDENTIFIER ASSIGNMENT ElementValue;
ElementValue ::= Annotation
    | Expression1
    | ElementValueArrayInitializer
;
ElementValueArrayInitializer ::= LEFTCURLY ElementValues RIGHTCURLY;
ElementValues ::= ElementValue
    | ElementValue COMMA ElementValues
;

ClassBody ::= LEFTCURLY ClassBodyDeclaration RIGHTCURLY;
ClassBodyDeclaration ::= SEMICOLON
    | Modifiers MemberDecl
    | STATIC Block
    | Block
;
Modifiers ::= Modifier
    | Modifier Modifiers
    |
;
MemberDecl ::= MethodOrFieldDecl
    | VOID IDENTIFIER VoidMethodDeclaratorRest
    | IDENTIFIER ConstructorDeclaratorRest
    | GenericMethodOrConstructorDecl
    | ClassDeclaration
    | InterfaceDeclaration
;
MethodOrFieldDecl ::= Type IDENTIFIER MethodOrFieldRest;
MethodDeclaratorRest ::= FieldDeclaratorsRest SEMICOLON
    | MethodDeclaratorRest
;
MethodDeclaratorRest ::= FormalParameters Brackets Block
    | FormalParameters Brackets SEMICOLON
    | FormalParameters Brackets THROWS QualifiedIdentifierList Block
    | FormalParameters Brackets THROWS QualifiedIdentifierList SEMICOLON
;
Brackets ::= LEFTBRACKET RIGHTBRACKET
    | Brackets LEFTBRACKET RIGHTBRACKET
    |
;
VoidMethodDeclaratorRest ::= FormalParameters Block
    | FormalParameters SEMICOLON
    | FormalParameters THROWS QualifiedIdentifierList Block
    | FormalParameters THROWS QualifiedIdentifierList SEMICOLON
;
ConstructorDeclaratorRest ::= FormalParameters Block
    | FormalParameters THROWS Block
;
GenericMethodOrConstructorDecl ::= TypeParameters GenericMethodOrConstructorRest;
GenericMethodOrConstructorRest ::= Type IDENTIFIER MethodDeclaratorRest
    | VOID IDENTIFIER MethodDeclaratorRest
    | IDENTIFIER ConstructorDeclaratorRest
;

InterfaceBody ::= LEFTCURLY InterfaceBodyDeclaration RIGHTCURLY;
InterfaceBodyDeclaration ::= SEMICOLON
    | Modifiers InterfaceMemberDecl
;
InterfaceMemberDecl ::= InterfaceMethodOrFieldDecl
    | VOID IDENTIFIER VoidInterfaceMethodDeclaratorRest
    | InterfaceGenericMethodDecl
    | ClassDeclaration
    | InterfaceDeclaration
;
InterfaceMethodOrFieldDecl ::= Type IDENTIFIER InterfaceMethodOrFieldRest;
InterfaceMethodOrFieldRest ::= ConstantDeclaratorsRest SEMICOLON
    | InterfaceMethodDeclaratorRest SEMICOLON
;
ConstantDeclaratorsRest ::= ConstantDeclaratorRest
    | ConstantDeclaratorRest COMMA ConstantDeclarator
;
ConstantDeclaratorRest ::= Brackets ASSIGNMENT VariableInitializer;
ConstantDeclarator ::= IDENTIFIER ConstantDeclaratorRest;
InterfaceMethodDeclaratorRest ::= FormalParameters Brackets SEMICOLON
    | FormalParameters Brackets THROWS QualifiedIdentifierList SEMICOLON
;
VoidInterfaceMethodDeclaratorRest ::= FormalParameters SEMICOLON
    | FormalParameters THROWS QualifiedIdentifierList
;
InterfaceGenericMethodDecl ::= TypeParameters Type IDENTIFIER InterfaceMethodDeclaratorRest
    | TypeParameters VOID IDENTIFIER InterfaceMethodDeclaratorRest
;
FormalParameters ::= LEFT FormalParameterDecls RIGHT
    | LEFT RIGHT
;
FormalParameterDecls ::= VariableModifiers Type FormalParameterDeclsRest;
VariableModifier ::= FINAL
    | Annotation
;
VariableModifiers  ::= VariableModifier
    | VariableModifiers VariableModifier
    |
;
FormalParameterDeclsRest ::= VariableDeclaratorId
    | VariableDeclaratorId COMMA FormalParameterDecls
    | TRIPLEPOINT VariableDeclaratorId
;
VariableDeclaratorId ::= IDENTIFIER Brackets;
VariableDeclarators ::= VariableDeclarator
    | VariableDeclarators COMMA VariableDeclarator
;
VariableDeclarator ::= IDENTIFIER VariableDeclaratorRest;
VariableDeclaratorRest ::= Brackets
    | Brackets ASSIGNMENT VariableInitializer
;
VariableInitializer ::= ArrayInitializer
    | Expression
;
VariableInitializers ::= VariableInitializer
    | VariableInitializers VariableInitializer
;
ArrayInitializer ::= LEFTCURLY RIGHTCURLY
    | LEFTCURLY VariableInitializers RIGHTCURLY
    | LEFTCURLY VariableInitializers COMMA RIGHTCURLY
;

