package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

non terminal QualifiedIdentifier, QualifiedIdentifierList, CompilationUnit, ImportDeclaration, TypeDeclaration, ClassOrInterfaceDeclaration, ClassDeclaration, InterfaceDeclaration, NormalClassDeclaration, EnumDeclaration, NormalInterfaceDeclaration, AnnotationTypeDeclaration, Type, BasicType, ReferenceType, TypeArguments, TypeArgument, NonWildcardTypeArguments, TypeList, TypeArgumentsOrDiamond, NonWildcardTypeArgumentsOrDiamond, TypeParameters, TypeParameter, Bound, Modifier, Annotations, Annotation, AnnotationElement, ElementValuePairs, ElementValuePair, ElementValue, ElementValueArrayInitializer, ElementValues, ClassBody, ClassBodyDeclaration, MemberDecl, MethodOrFieldDecl, MethodOrFieldRest, FieldDeclaratorsRest, MethodDeclaratorRest, VoidMethodDeclaratorRest, ConstructorDeclaratorRest, GenericMethodOrConstructorDecl, GenericMethodOrConstructorRest, InterfaceBody, InterfaceBodyDeclaration, InterfaceMemberDecl, InterfaceMethodOrFieldDecl, InterfaceMethodOrFieldRest, ConstantDeclaratorsRest, ConstantDeclaratorRest, ConstantDeclarator, InterfaceMethodDeclaratorRest, VoidInterfaceMethodDeclaratorRest, InterfaceGenericMethodDecl, FormalParameters, FormalParameterDecls, VariableModifier, FormalParameterDeclsRest, VariableDeclaratorId, VariableDeclarators, VariableDeclarator, VariableDeclaratorRest, VariableInitializer, ArrayInitializer, Block, BlockStatements, BlockStatement, LocalVariableDeclarationStatement, Statement, StatementExpression, Catches, CatchClause, CatchType, Finally, ResourceSpecification, Resources, Resource, SwitchBlockStatementGroups, SwitchBlockStatementGroup, SwitchLabels, SwitchLabel, EnumConstantName, ForControl, ForVarControl, ForVarControlRest, ForVariableDeclaratorsRest, ForInit, ForUpdate, Expression, AssignmentOperator, Expression1, Expression1Rest, Expression2, Expression2, InfixOp, Expression3, PrefixOp, PostfixOp, Primary, Literal, ParExpression, Arguments, SuperSuffix, ExplicitGenericInvocationSuffix, Creator, CreatedName, ClassCreatorRest, ArrayCreatorRest, IdentifierSuffix, ExplicitGenericInvocation, InnerCreator, Selector, EnumBody, EnumConstants, EnumConstant, EnumBodyDeclarations, AnnotationTypeBody, AnnotationTypeElementDeclarations, AnnotationTypeElementDeclaration, AnnotationTypeElementRest, AnnotationMethodOrConstantRest, AnnotationMethodRest;

QualifiedIdentifier ::= IDENTIFIER
    | IDENTIFIER POINT QualifiedIdentifier
;
QualifiedIdentifierList ::= QualifiedIdentifier
    | QualifiedIdentifier COMMA QualifiedIdentifierList
;

CompilationUnit ::= TypeDeclaration
    | ImportDeclaration TypeDeclaration
    | PACKAGE QualifiedIdentifier SEMICOLON TypeDeclaration
    | PACKAGE QualifiedIdentifier SEMICOLON ImportDeclaration TypeDeclaration
    | Annotations PACKAGE QualifiedIdentifier SEMICOLON TypeDeclaration
    | Annotations PACKAGE QualifiedIdentifier SEMICOLON ImportDeclaration TypeDeclaration
;
ImportDeclaration ::= IMPORT QualifiedIdentifier SEMICOLON
    | IMPORT QualifiedIdentifier POINT TIMES SEMICOLON
    | IMPORT STATIC QualifiedIdentifier SEMICOLON
    | IMPORT STATIC QualifiedIdentifier POINT TIMES SEMICOLON

    | IMPORT QualifiedIdentifier SEMICOLON ImportDeclaration
    | IMPORT QualifiedIdentifier POINT TIMES SEMICOLON ImportDeclaration
    | IMPORT STATIC QualifiedIdentifier SEMICOLON ImportDeclaration
    | IMPORT STATIC QualifiedIdentifier POINT TIMES SEMICOLON ImportDeclaration
;
TypeDeclaration ::= ClassOrInterfaceDeclaration;
ClassOrInterfaceDeclaration ::= ClassDeclaration
    | InterfaceDeclaration
    | Modifier ClassDeclaration
    | Modifier InterfaceDeclaration
    | ClassDeclaration ClassOrInterfaceDeclaration
    | InterfaceDeclaration ClassOrInterfaceDeclaration
    | Modifier ClassDeclaration ClassOrInterfaceDeclaration
    | Modifier InterfaceDeclaration ClassOrInterfaceDeclaration
;
ClassDeclaration ::= NormalClassDeclaration
    | EnumDeclaration
;
InterfaceDeclaration ::= NormalInterfaceDeclaration
    | AnnotationTypeDeclaration
;
NormalClassDeclaration ::= CLASS IDENTIFIER ClassBody
    | CLASS IDENTIFIER TypeParameters ClassBody
    | CLASS IDENTIFIER EXTENDS Type ClassBody
    | CLASS IDENTIFIER IMPLEMENTS TypeList ClassBody

    | CLASS IDENTIFIER TypeParameters EXTENDS  ClassBody
    | CLASS IDENTIFIER TypeParameters EXTENDS IMPLEMENTS  ClassBody

    | CLASS IDENTIFIER EXTENDS IMPLEMENTS ClassBody
;
EnumDeclaration ::= ENUM IDENTIFIER EnumBody
    | ENUM IDENTIFIER IMPLEMENTS TypeList EnumBody
;
NormalInterfaceDeclaration ::= INTERFACE IDENTIFIER InterfaceBody
    | INTERFACE IDENTIFIER TypeParameters InterfaceBody
    | INTERFACE IDENTIFIER EXTENDS TypeList InterfaceBody
    | INTERFACE IDENTIFIER TypeParameters EXTENDS TypeList InterfaceBody
;
AnnotationTypeDeclaration ::= AT IDENTIFIER AnnotationTypeBody;

Type ::= BasicType
    | BasicType SQUARELEFT SQUARERIGHT
    | ReferenceType
    | ReferenceType SQUARELEFT SQUARERIGHT
;
BasicType ::= BYTE
    | SHORT
    | CHAR
    | INT
    | LONG
    | FLOAT
    | DOUBLE
    | BOOLEAN
;
ReferenceType ::= IDENTIFIER
    | IDENTIFIER TypeArguments
    | IDENTIFIER POINT ReferenceType
;
TypeArguments ::= SMALLER TypeArgument GREATER;
TypeArgument ::= ReferenceType
    | INTERROGATION EXTENDS ReferenceType
    | INTERROGATION SUPER ReferenceType

    | ReferenceType COMMA TypeArgument
    | INTERROGATION EXTENDS ReferenceType COMMA TypeArgument
    | INTERROGATION SUPER ReferenceType COMMA TypeArgument
;
NonWildcardTypeArguments ::= TypeList;
TypeList ::= ReferenceType
    | ReferenceType COMMA TypeList
;
TypeArgumentsOrDiamond ::=  GREATER SMALLER
    | TypeArguments
;
NonWildcardTypeArgumentsOrDiamond ::= GREATER SMALLER
    | NonWildcardTypeArguments
;
TypeParameters ::= GREATER TypeParameter SMALLER;
TypeParameter ::= IDENTIFIER
    | IDENTIFIER EXTENDS Bound
    | IDENTIFIER COMMA TypeParameter
    | IDENTIFIER EXTENDS Bound COMMA TypeParameter
;
Bound ::= ReferenceType
    | ReferenceType AMPERSAND Bound
;

Modifier ::= Annotation
    | PUBLIC
    | PROTECTED
    | PRIVATE
    | STATIC
    | ABSTRACT
    | FINAL
    | NATIVE
    | SYNCHRONIZED
    | TRANSIENT
    | VOLATILE
    | STRICTFP
;

Annotations ::= Annotation
    | Annotations Annotation
;

Annotation ::= AT QualifiedIdentifier
    | AT QualifiedIdentifier LEFT AnnotationElement RIGHT
;
AnnotationElement ::= ElementValuePairs
    | ElementValue
;
ElementValuePairs ::= ElementValuePair
    | ElementValuePair COMMA ElementValuePairs
;
ElementValuePair ::= IDENTIFIER EQUALS ElementValue;
ElementValue ::= Annotation
    | Expression1
    | ElementValueArrayInitializer
;
ElementValueArrayInitializer ::= LEFTCURYLY ElementValues RIGHTCURLY;
ElementValues ::= ElementValue
    | ElementValue COMMA ElementValues
;
